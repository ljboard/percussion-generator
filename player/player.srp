# player.srp - player
#
# Lizzy Board
# April 2017

SERVICE = "drums4"

require "playerbase"
require "beats"

low_start_beat = 1 #cur_start_beat 
mid_start_beat = 1 #cur_start_beat 
high_start_beat = 1 #cur_start_beat 

low_beats = [low_start_beat, low_start_beat]
mid_beats = [mid_start_beat, mid_start_beat]
high_beat = [high_start_beat, high_start_beat]

start = true

def play_a_measure()
    # compute a measure using these variables:
    #    cur_style - a symbol representing style to play (if
    #       this is not your style, do not play)
    #    cur_start_beat - what beat to start on if you are stopped
    #    cur_stop_beat - what beat to stop on if you have started (you can
    #       stop slightly late; generally you should not start any notes 
    #       at or after tm_stop_beat but you can play a short note on 
    #       tm_stop_beat if it is stylistically sensible.)
    #    cur_beats_per_measure - the current time signature as an integer
    #    cur_bps - current beats per second (the vtsched will implement this
    #       but reading the vtsched timemap slope is not reliable because
    #       vtsched may be updated instantaneously after this call.
    #    cur_scale - boolean array representing current scale
    #    cur_chord - boolean array representing current chord
    #    cur_bass - integer representing root of chord
    #
    display "play_a_measure", cur_beats_per_measure, cur_bps, cur_start_beat
    # display "    ", cur_scale, cur_chord, cur_bass
    # Use EPSILON here because comparing floats for equality is not
    #   reliable without very difficult analysis. So, instead of
    #   x >= y, we write x + EPSILON > y

    if (start or (loops == 0) or (current_measure < loops)):
        low_beats = beat_measure(low_start_beat, low_beats_1)
        mid_beats = beat_measure(mid_start_beat, mid_beats_1)
        high_beats = beat_measure(high_start_beat, high_beats_1)

        if ((cur_beats_per_measure > 4) or 
            (cur_beats_per_measure <= 4) and (random() < .3)):
            low_beats = beat_measure(low_start_beat, low_beats_2)
            mid_beats = beat_measure(mid_start_beat, mid_beats_2)
            high_beats = beat_measure(high_start_beat, high_beats_2)

        if (loops > 0): 
            low_measures.append(low_beats)
            mid_measures.append(mid_beats)
            high_measures.append(high_beats)

    else: 
        low_beats = low_measures[current_measure % loops]
        mid_beats = mid_measures[current_measure % loops]
        high_beats = high_measures[current_measure % loops]

    random_change = int(random() * cur_beats_per_measure)

    for i = 0 to (len(low_beats)-1):
        time = (low_beats[i]) - 1
        display "pause", pause
        if (time < (cur_beats_per_measure + 1) and 
            (not (pause <= time and time <= pause + 1))):
            vtsched.cause(time, midi_out, 'note', 9, low_instrument, low_instrument_volume, 1)

    for i = 0 to (len(mid_beats)-1):
        time = (mid_beats[i]) - 1
        if (time < (cur_beats_per_measure + 1) and 
            (not (pause <= time and time <= pause + 1))):
            vtsched.cause(time, midi_out, 'note', 9, mid_instrument, mid_instrument_volume, 1)

    for i = 0 to (len(high_beats)-1):
        time = (high_beats[i]) - 1
        if (time < (cur_beats_per_measure + 1) and 
            (not (pause <= time and time <= pause + 1))):
            vtsched.cause(time, midi_out, 'note', 9, high_instrument, high_instrument_volume, 1)

    low_start_beat = low_beats[len(low_beats) - 1]
    mid_start_beat = mid_beats[len(mid_beats) - 1]
    high_start_beat = high_beats[len(high_beats) - 1]
    start = false
    current_measure = current_measure + 1

def pick_next(prev_beat, curr_beats): 
    if (not curr_beats.has_key(prev_beat)): return 1
    states = curr_beats[prev_beat]
    i = random()
    c = 0
    keys = states.keys()
    for j = 0 to len(keys): 
        beat = keys[j]
        c = c + states[beat]
        if (c > i): 
            return beat

def beat_measure(prev_beat, curr_beats): # returns a list of beat numbers
    beats = [prev_beat]
    current_beat = pick_next(prev_beat, curr_beats)
    check = 0
    while (current_beat > prev_beat and check < 8): 
        beats.append(current_beat)
        prev_beat = current_beat
        current_beat = pick_next(current_beat, curr_beats)
        check = check + 1
    beats.append(current_beat)
    return beats

